#!/usr/bin/env ts-node

/**
 * Create Sample Department Documents
 * ÂâµÂª∫ÁØÑ‰æãÈÉ®ÈñÄÊñáÊ™î
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const sampleDocuments = [
  {
    title: 'Â≠∏ÁîüË´ãÂÅáÁî≥Ë´ãË°®Ê†º',
    description: 'Â≠∏ÁîüÂõ†ÁóÖÂÅá„ÄÅ‰∫ãÂÅáÊàñÂÖ∂‰ªñÂéüÂõ†Ë´ãÂÅáÊôÇ‰ΩøÁî®ÁöÑÊ®ôÊ∫ñË°®Ê†º„ÄÇÊ≠§Ë°®Ê†ºÈ†àÁî±ÂÆ∂Èï∑Á∞ΩÂêçÁ¢∫Ë™çÔºå‰∏¶Áî±Áè≠‰∏ª‰ªªÂèäÂ≠∏ÂãôËôïÂØ©Ê†∏„ÄÇ',
    resourceType: 'PDF',
    fileUrl: '/documents/academic/leave-application-form.pdf',
    category: 'academic-affairs',
    status: 'published',
    tags: ['Ë°®Ê†º', 'Ë´ãÂÅá', 'Â≠∏ÂãôËôï']
  },
  {
    title: 'Â§ñÂúãÂ≠∏ÁîüÁ∞ΩË≠âÂª∂ÊúüÊåáÂçó',
    description: 'ÂçîÂä©Â§ñÂúãÂ≠∏ÁîüËæ¶ÁêÜÁ∞ΩË≠âÂª∂ÊúüÁöÑË©≥Á¥∞ÊåáÂºïÔºåÂåÖÂê´ÊâÄÈúÄÊñá‰ª∂Ê∏ÖÂñÆ„ÄÅÁî≥Ë´ãÊµÅÁ®ãÂèäÊ≥®ÊÑè‰∫ãÈ†Ö„ÄÇ',
    resourceType: 'Document',
    fileUrl: '/documents/foreign/visa-extension-guide.docx',
    category: 'foreign-affairs',
    status: 'published',
    tags: ['Á∞ΩË≠â', 'Â§ñÂúãÂ≠∏Áîü', 'Âª∂Êúü']
  },
  {
    title: 'Ë™≤Á®ãËÆäÊõ¥Áî≥Ë´ãÊµÅÁ®ã',
    description: 'Â≠∏ÁîüÁî≥Ë´ãËÆäÊõ¥Ë™≤Á®ãÊôÇÁöÑÊ®ôÊ∫ñ‰ΩúÊ•≠Á®ãÂ∫èÔºåÂåÖÂê´Áî≥Ë´ãÊôÇÊ©ü„ÄÅÊâÄÈúÄÊñá‰ª∂ÂèäÂØ©Ê†∏Ê®ôÊ∫ñ„ÄÇ',
    resourceType: 'PDF',
    fileUrl: '/documents/classroom/course-change-procedure.pdf',
    category: 'classroom-affairs',
    status: 'published',
    tags: ['Ë™≤Á®ã', 'ËÆäÊõ¥', 'Áî≥Ë´ãÊµÅÁ®ã']
  },
  {
    title: 'Ê†°ÂúíÂÆâÂÖ®ÁÆ°ÁêÜÊîøÁ≠ñ',
    description: 'Â≠∏Ê†°Êï¥È´îÂÆâÂÖ®ÁÆ°ÁêÜÊîøÁ≠ñÔºåÂåÖÂê´Ê†°ÂúíÈñÄÁ¶ÅÁÆ°ÁêÜ„ÄÅË®™ÂÆ¢ÁÆ°ÁêÜ„ÄÅÁ∑äÊÄ•ÊáâËÆäÁ®ãÂ∫èÁ≠âÈáçË¶ÅË¶èÂÆö„ÄÇ',
    resourceType: 'Document',
    fileUrl: '/documents/policies/campus-security-policy.docx',
    category: 'policies-procedures',
    status: 'published',
    tags: ['ÊîøÁ≠ñ', 'ÂÆâÂÖ®ÁÆ°ÁêÜ', 'Ê†°Âúí']
  },
  {
    title: 'Êñ∞ÁîüÂÖ•Â≠∏ÊåáÂçó',
    description: 'Êñ∞ÁîüÂ†±Âà∞È†àÁü•ÂèäÂÖ•Â≠∏Ê∫ñÂÇô‰∫ãÈ†ÖÔºåÂåÖÂê´Âà∂ÊúçË≥ºË≤∑„ÄÅÊïôÁßëÊõ∏Ê∏ÖÂñÆ„ÄÅÁ§æÂúò‰ªãÁ¥πÁ≠âÈáçË¶ÅË≥áË®ä„ÄÇ',
    resourceType: 'PDF',
    fileUrl: '/documents/students/new-student-guide.pdf',
    category: 'student-resources',
    status: 'published',
    tags: ['Êñ∞Áîü', 'ÂÖ•Â≠∏', 'ÊåáÂçó']
  },
  {
    title: 'Ë®≠ÂÇôÂÄüÁî®Áî≥Ë´ãË°®',
    description: 'ÊïôÂ∏´ÊàñÂ≠∏ÁîüÂÄüÁî®Â≠∏Ê†°Ë®≠ÂÇôÔºàÂ¶ÇÊäïÂΩ±Ê©ü„ÄÅÈü≥ÈüøË®≠ÂÇôÁ≠âÔºâÊôÇ‰ΩøÁî®ÁöÑÁî≥Ë´ãË°®Ê†º„ÄÇ',
    resourceType: 'PDF',
    fileUrl: '/documents/admin/equipment-borrowing-form.pdf',
    category: 'administrative-forms',
    status: 'draft',
    tags: ['Ë®≠ÂÇô', 'ÂÄüÁî®', 'Áî≥Ë´ãË°®']
  }
]

async function main() {
  console.log('üöÄ Starting sample documents creation...')

  try {
    // Get categories
    const categories = await prisma.resourceCategory.findMany()
    const categoryMap = new Map(categories.map(cat => [cat.name, cat.id]))

    // Find or create admin user
    let adminUser = await prisma.user.findFirst({
      where: {
        userRoles: {
          some: {
            role: {
              name: 'admin'
            }
          }
        }
      }
    })

    if (!adminUser) {
      console.log('‚ÑπÔ∏è  No admin user found, creating documents without creator')
    }

    console.log(`üìÑ Creating ${sampleDocuments.length} sample documents...`)

    for (const doc of sampleDocuments) {
      const categoryId = categoryMap.get(doc.category)
      
      if (!categoryId) {
        console.log(`‚ö†Ô∏è  Category ${doc.category} not found, skipping document: ${doc.title}`)
        continue
      }

      // Check if document already exists
      const existingDoc = await prisma.resource.findFirst({
        where: { title: doc.title }
      })

      if (existingDoc) {
        console.log(`‚úÖ Document already exists: ${doc.title}`)
        continue
      }

      const created = await prisma.resource.create({
        data: {
          title: doc.title,
          description: doc.description,
          resourceType: doc.resourceType,
          fileUrl: doc.fileUrl,
          categoryId: categoryId,
          status: doc.status,
          createdBy: adminUser?.id,
          tags: {
            create: doc.tags.map(tagName => ({
              tag: {
                connectOrCreate: {
                  where: { name: tagName },
                  create: {
                    name: tagName,
                    color: `#${Math.floor(Math.random()*16777215).toString(16).padStart(6, '0')}`
                  }
                }
              }
            }))
          }
        },
        include: {
          category: true,
          tags: {
            include: { tag: true }
          }
        }
      })

      console.log(`‚úÖ Created: ${created.title} in ${created.category?.displayName}`)
    }

    console.log('üéâ Sample documents creation completed!')

    // Display summary
    const documentsCount = await prisma.resource.count()
    const categoriesWithCounts = await prisma.resourceCategory.findMany({
      include: {
        resources: true
      },
      orderBy: { sortOrder: 'asc' }
    })

    console.log('\nüìä Documents Summary:')
    console.log(`Total documents: ${documentsCount}`)
    categoriesWithCounts.forEach(cat => {
      if (cat.resources.length > 0) {
        console.log(`  ‚Ä¢ ${cat.displayName}: ${cat.resources.length} documents`)
      }
    })

  } catch (error) {
    console.error('‚ùå Error creating sample documents:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()