/**
 * Test Carousel API Direct Query
 * Ê∏¨Ë©¶Ëº™Êí≠ API Áõ¥Êé•Êü•Ë©¢
 */

import { prisma } from '../lib/prisma'

async function testCarouselQuery() {
  try {
    console.log('üß™ Testing carousel API query logic...')
    
    // È¶ñÂÖàÊ®°Êì¨ÂÖ¨ÂÖ±APIÁöÑÊü•Ë©¢
    console.log('\n1. Ê®°Êì¨ÂÖ¨ÂÖ±APIÊü•Ë©¢:')
    const publicQuery = await prisma.contentCarouselImage.findMany({
      where: {
        isActive: true
      },
      orderBy: [
        { order: 'asc' },
        { createdAt: 'desc' }
      ],
      select: {
        id: true,
        title: true,
        description: true,
        imageUrl: true,
        altText: true,
        order: true,
        createdAt: true
      }
    })
    
    console.log(`üì∏ Public API would return: ${publicQuery.length} images`)
    if (publicQuery.length > 0) {
      console.log('‚úÖ Public API query is working correctly!')
      publicQuery.forEach((img, index) => {
        console.log(`   ${index + 1}. ID: ${img.id}, Order: ${img.order}, URL: ${img.imageUrl}`)
      })
    } else {
      console.log('‚ùå Public API query returns 0 images - this explains the frontend issue!')
    }
    
    // ÁÑ∂ÂæåÊ™¢Êü•‰∏çÂêåÁöÑÊü•Ë©¢Ê¢ù‰ª∂
    console.log('\n2. Ê™¢Êü•ÂêÑÁ®ÆÊü•Ë©¢Ê¢ù‰ª∂:')
    
    // Êü•Ë©¢ÊâÄÊúâË®òÈåÑÔºàÁÑ°Ê¢ù‰ª∂Ôºâ
    const allRecords = await prisma.contentCarouselImage.findMany()
    console.log(`üìä Total records in table: ${allRecords.length}`)
    
    // Êü•Ë©¢ isActive = true ÁöÑË®òÈåÑ
    const activeTrue = await prisma.contentCarouselImage.findMany({
      where: { isActive: true }
    })
    console.log(`‚úÖ Records with isActive = true: ${activeTrue.length}`)
    
    // Êü•Ë©¢ isActive = false ÁöÑË®òÈåÑ
    const activeFalse = await prisma.contentCarouselImage.findMany({
      where: { isActive: false }
    })
    console.log(`‚ùå Records with isActive = false: ${activeFalse.length}`)
    
    // Ê™¢Êü• null ÂÄº
    const activeNull = await prisma.contentCarouselImage.findMany({
      where: { isActive: null }
    })
    console.log(`‚ö†Ô∏è Records with isActive = null: ${activeNull.length}`)
    
    // Ê™¢Êü•ÊØèÊ¢ùË®òÈåÑÁöÑ isActive ÂÄº
    console.log('\n3. Ê™¢Êü•ÊØèÊ¢ùË®òÈåÑÁöÑ isActive ÂÄº:')
    allRecords.forEach((record, index) => {
      console.log(`   ${index + 1}. ID: ${record.id}, isActive: ${record.isActive} (type: ${typeof record.isActive})`)
    })
    
    // ÂòóË©¶ÂéüÂßãSQLÊü•Ë©¢
    console.log('\n4. Âü∑Ë°åÂéüÂßãSQLÊü•Ë©¢:')
    const rawQuery = await prisma.$queryRaw`
      SELECT id, title, image_url, is_active, "order", created_at 
      FROM content_carousel_images 
      WHERE is_active = true 
      ORDER BY "order" ASC, created_at DESC
    `
    console.log(`üîç Raw SQL query result: ${Array.isArray(rawQuery) ? rawQuery.length : 0} records`)
    
    if (Array.isArray(rawQuery) && rawQuery.length > 0) {
      rawQuery.forEach((record: any, index: number) => {
        console.log(`   ${index + 1}. ID: ${record.id}, is_active: ${record.is_active}, order: ${record.order}`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testCarouselQuery()