// ES International Department Prisma Schema
// 支援 Zeabur 多環境雲端資料庫部署
// Supports Zeabur multi-environment cloud database deployment

generator client {
  provider = "prisma-client-js"
  // 優化客戶端生成以支援 Zeabur 部署環境
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // PostgreSQL 原生支援外鍵約束，無需額外配置
}

// 使用者管理 | User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?   @map("password_hash")
  firstName     String?   @map("first_name") @db.VarChar(100)
  lastName      String?   @map("last_name") @db.VarChar(100)
  displayName   String?   @map("display_name") @db.VarChar(200)
  phone         String?   @db.VarChar(20)
  avatarUrl     String?   @map("avatar_url")
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[] @relation("UserRoles")
  assignedRoles   UserRole[] @relation("UserRoleAssigner")
  sessions        UserSession[]
  announcements   Announcement[]
  newsletters     Newsletter[]
  events          Event[]
  resources       Resource[]
  notifications   Notification[]
  messageBoard    MessageBoard[]
  messageReplies  MessageReply[]
  feedbackForms   FeedbackForm[] @relation("FeedbackAuthor")
  assignedFeedback FeedbackForm[] @relation("FeedbackAssigned")
  fileUploads     FileUpload[]
  settingsUpdated SystemSetting[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  displayName String   @map("display_name") @db.VarChar(100)
  description String?
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  roleId     Int      @map("role_id")
  assignedBy String?  @map("assigned_by")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  user     User  @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role     Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assigner User? @relation("UserRoleAssigner", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  sessionToken String    @unique @map("session_token")
  expiresAt    DateTime  @map("expires_at")
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 內容管理 | Content Management
model Announcement {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  content        String
  summary        String?
  authorId       String?   @map("author_id")
  targetAudience String    @map("target_audience") @db.VarChar(20) // 'teachers', 'parents', 'all'
  priority       String    @default("medium") @db.VarChar(10) // 'low', 'medium', 'high'
  status         String    @default("draft") @db.VarChar(20) // 'draft', 'published', 'archived'
  publishedAt    DateTime? @map("published_at")
  expiresAt      DateTime? @map("expires_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  author User? @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model Newsletter {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  content         String
  htmlContent     String?   @map("html_content")
  coverImageUrl   String?   @map("cover_image_url")
  authorId        String?   @map("author_id")
  status          String    @default("draft") @db.VarChar(20) // 'draft', 'published', 'archived'
  issueNumber     Int?      @map("issue_number")
  publicationDate DateTime? @map("publication_date") @db.Date
  downloadCount   Int       @default(0) @map("download_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  author User? @relation(fields: [authorId], references: [id])

  @@map("newsletters")
}

model Event {
  id                    Int       @id @default(autoincrement())
  title                 String    @db.VarChar(255)
  description           String?
  eventType             String    @map("event_type") @db.VarChar(50)
  startDate             DateTime  @map("start_date") @db.Date
  endDate               DateTime? @map("end_date") @db.Date
  startTime             DateTime? @map("start_time") @db.Time
  endTime               DateTime? @map("end_time") @db.Time
  location              String?   @db.VarChar(255)
  maxParticipants       Int?      @map("max_participants")
  registrationRequired  Boolean   @default(false) @map("registration_required")
  registrationDeadline  DateTime? @map("registration_deadline") @db.Date
  targetGrades          Json?     @map("target_grades") // Array of grade levels
  createdBy             String?   @map("created_by")
  status                String    @default("draft") @db.VarChar(20) // 'draft', 'published', 'cancelled'
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  creator User? @relation(fields: [createdBy], references: [id])

  @@map("events")
}

model CoffeeWithPrincipal {
  id                Int      @id @default(autoincrement())
  title             String   @db.VarChar(255)
  description       String?
  gradeLevels       Json     @map("grade_levels") // ['1-2', '3-4', '5-6']
  presentationUrl   String?  @map("presentation_url")
  materialsUrl      String?  @map("materials_url")
  eventDate         DateTime @map("event_date") @db.Date
  sessionTime       DateTime? @map("session_time") @db.Time
  location          String?  @db.VarChar(255)
  maxParticipants   Int?     @map("max_participants")
  registrationCount Int      @default(0) @map("registration_count")
  status            String   @default("upcoming") @db.VarChar(20) // 'upcoming', 'ongoing', 'completed', 'cancelled'
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("coffee_with_principal")
}

// 資源管理 | Resource Management
model ResourceCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  displayName String   @map("display_name") @db.VarChar(200)
  description String?
  icon        String?  @db.VarChar(50)
  color       String?  @db.VarChar(50)
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  resources Resource[]

  @@map("resource_categories")
}

model GradeLevel {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(20) // 'Grades 1-2', 'Grades 3-4', etc.
  displayName String   @map("display_name") @db.VarChar(50)
  minGrade    Int      @map("min_grade")
  maxGrade    Int      @map("max_grade")
  color       String?  @db.VarChar(50)
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")

  // Relations
  resources Resource[]

  @@map("grade_levels")
}

model Resource {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(255)
  description   String?
  resourceType  String    @map("resource_type") @db.VarChar(50) // 'PDF', 'Video', 'Interactive', 'External Platform'
  fileUrl       String?   @map("file_url")
  externalUrl   String?   @map("external_url")
  thumbnailUrl  String?   @map("thumbnail_url")
  fileSize      BigInt?   @map("file_size") // in bytes
  duration      Int?      // for video resources in seconds
  gradeLevelId  Int?      @map("grade_level_id")
  categoryId    Int?      @map("category_id")
  createdBy     String?   @map("created_by")
  downloadCount Int       @default(0) @map("download_count")
  viewCount     Int       @default(0) @map("view_count")
  isFeatured    Boolean   @default(false) @map("is_featured")
  status        String    @default("draft") @db.VarChar(20) // 'draft', 'published', 'archived'
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  gradeLevel GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  category   ResourceCategory? @relation(fields: [categoryId], references: [id])
  creator    User? @relation(fields: [createdBy], references: [id])
  tags       ResourceTagRelation[]

  @@map("resources")
}

model ResourceTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  color     String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  resources ResourceTagRelation[]

  @@map("resource_tags")
}

model ResourceTagRelation {
  resourceId Int @map("resource_id")
  tagId      Int @map("tag_id")

  // Relations
  resource Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag      ResourceTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([resourceId, tagId])
  @@map("resource_tag_relations")
}

// 通知與溝通 | Notification & Communication
model Notification {
  id          Int       @id @default(autoincrement())
  recipientId String    @map("recipient_id")
  title       String    @db.VarChar(255)
  message     String
  type        String    @db.VarChar(50) // 'announcement', 'event', 'newsletter', 'system'
  relatedId   Int?      @map("related_id") // Reference to related entity
  relatedType String?   @map("related_type") @db.VarChar(50) // Type of related entity
  isRead      Boolean   @default(false) @map("is_read")
  readAt      DateTime? @map("read_at")
  priority    String    @default("medium") @db.VarChar(10) // 'low', 'medium', 'high'
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  recipient User @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model MessageBoard {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String
  authorId   String?  @map("author_id")
  boardType  String   @default("general") @db.VarChar(20) // 'teachers', 'parents', 'general'
  isPinned   Boolean  @default(false) @map("is_pinned")
  replyCount Int      @default(0) @map("reply_count")
  viewCount  Int      @default(0) @map("view_count")
  status     String   @default("active") @db.VarChar(20) // 'active', 'closed', 'archived'
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  author  User? @relation(fields: [authorId], references: [id])
  replies MessageReply[]

  @@map("message_board")
}

model MessageReply {
  id            Int       @id @default(autoincrement())
  messageId     Int       @map("message_id")
  authorId      String?   @map("author_id")
  content       String
  parentReplyId Int?      @map("parent_reply_id") // For nested replies
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  message     MessageBoard  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  author      User?         @relation(fields: [authorId], references: [id])
  parentReply MessageReply? @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies MessageReply[] @relation("ReplyToReply")

  @@map("message_replies")
}

model FeedbackForm {
  id           Int       @id @default(autoincrement())
  authorId     String?   @map("author_id")
  authorName   String?   @map("author_name") @db.VarChar(100) // For anonymous feedback
  authorEmail  String?   @map("author_email") @db.VarChar(255) // For anonymous feedback
  subject      String    @db.VarChar(255)
  message      String
  category     String?   @db.VarChar(50) // 'suggestion', 'complaint', 'appreciation', 'question'
  priority     String    @default("medium") @db.VarChar(10) // 'low', 'medium', 'high'
  status       String    @default("new") @db.VarChar(20) // 'new', 'in_progress', 'resolved', 'closed'
  assignedTo   String?   @map("assigned_to")
  response     String?
  responseDate DateTime? @map("response_date")
  isAnonymous  Boolean   @default(false) @map("is_anonymous")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  author   User? @relation("FeedbackAuthor", fields: [authorId], references: [id])
  assignee User? @relation("FeedbackAssigned", fields: [assignedTo], references: [id])

  @@map("feedback_forms")
}

// 系統設定 | System Configuration
model SystemSetting {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String?
  description String?
  dataType    String   @default("string") @db.VarChar(20) // 'string', 'number', 'boolean', 'json'
  isPublic    Boolean  @default(false) @map("is_public") // Whether this setting can be accessed by non-admins
  updatedBy   String?  @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  updater User? @relation(fields: [updatedBy], references: [id])

  @@map("system_settings")
}

model FileUpload {
  id               Int      @id @default(autoincrement())
  originalFilename String   @map("original_filename") @db.VarChar(255)
  storedFilename   String   @map("stored_filename") @db.VarChar(255)
  filePath         String   @map("file_path")
  fileSize         BigInt   @map("file_size")
  mimeType         String?  @map("mime_type") @db.VarChar(100)
  uploadedBy       String?  @map("uploaded_by")
  relatedType      String?  @map("related_type") @db.VarChar(50) // 'announcement', 'newsletter', 'resource', etc.
  relatedId        Int?     @map("related_id")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  uploader User? @relation(fields: [uploadedBy], references: [id])

  @@map("file_uploads")
}